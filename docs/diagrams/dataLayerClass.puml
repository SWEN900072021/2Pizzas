@startuml data layer class diagram

interface ConnectionPool {
  getCurrentTransaction(): Connection
}

interface DataMapperRegistry {
  + getForClass(class: Class<T>): DataMapper<T>
  + register(class: Class<T>, mapper: DataMapper<T>)
}

interface DataMapper<T, ID, S> {
  + create(entity: T)
  + read(id: ID): T
  + update(entity: T)
  + delete(entity: T)
  + readAll(specification: S): List<T>
  + getEntityClass(): Class<T>
  + register(registry: DataMapper)
}

DataMapper .> DataMapperRegistry: "registers self with"
DataMapperRegistry ->"*" DataMapper: mappers

' interface SqlResultSetMapper<T> {
'   + map(results: ResultSet): List<T> 
'   + mapOne(results: ResultSet): T 
' }

abstract class AbstractUserMapper<T> {
  # abstractCreate(entity: T)
  # abstractRead(id: ID): T
  # abstractUpdate(entity: T)
  # abstractDelete(entity: T)
}

AbstractUserMapper ->"1" ConnectionPool: connectionPool

interface AirlineMapper {} 
interface AirlineSpecification {}

AirlineMapper --up--|> DataMapper
AirlineMapper .> AirlineSpecification: "finds all with"
AirlineRepositoryImpl -down->"1" AirlineMapper: mapper

class AirlineMapperImpl {
  - connectionPool: ConnectionPool
}

AirlineMapperImpl .|> AirlineMapper
AirlineMapperImpl -|> AbstractUserMapper
AirlineMapperImpl .down.> Airline: maps

interface AdministratorMapper {}
interface AdministratorSpecification {}

AdministratorMapper --up--|> DataMapper
AdministratorMapper .> AdministratorSpecification: "finds all with"
AdministratorRepositoryImpl -down->"1" AdministratorMapper: mapper

class AdministratorMapperImpl {
  - connectionPool: ConnectionPool
}

AdministratorMapperImpl .|> AdministratorMapper
AdministratorMapperImpl -up-|> AbstractUserMapper
AdministratorMapperImpl .down.> Administrator: maps

interface CustomerMapper {} 
interface CustomerSpecification {}

CustomerMapper --up--|> DataMapper
CustomerMapper ..> CustomerSpecification: "finds all with"
CustomerRepositoryImpl -down->"1" CustomerMapper: mapper

class CustomerMapperImpl {
  - connectionPool: ConnectionPool
}

CustomerMapperImpl .|> CustomerMapper
CustomerMapperImpl -|> AbstractUserMapper
CustomerMapperImpl .> Customer: maps

interface UserMapper {} 
interface UserSpecification {}

UserMapper --up--|> DataMapper
UserMapper .> UserSpecification: "finds all with"
UserRepositoryImpl -down-|>"1" UserMapper: mapper

class UserMapperImpl {
  - connectionPool: ConnectionPool
  - customerMapper: CustomerMapper
  - airlineMapper: AirlineMapper
  - administratorMapper: AdministratorMapper
}

UserMapperImpl .|> UserMapper
UserMapperImpl -|> AbstractUserMapper
UserMapperImpl .> User: maps


interface AirportMapper {} 
interface AirportSpecification {}

AirportMapper --up--|>  DataMapper
AirportMapper .> AirportSpecification: "finds all with"
AirportRepositoryImpl -down-|>"1" AirportMapper: mapper

class AirportMapperImpl {
  - connectionPool: ConnectionPool
}

AirportMapperImpl .|> AirportMapper
AirportMapperImpl .> Airport: maps

interface PassengerMapper {} 
interface PassengerSpecification {}

PassengerMapper --up--|> DataMapper
PassengerMapper .> PassengerSpecification: "finds all with"
PassengerRepositoryImpl -down-|>"1" PassengerMapper: mapper

class PassengerMapperImpl {
  - connectionPool: ConnectionPool
  - bookingMapper: BookingMapper
}

PassengerMapperImpl .|> PassengerMapper
PassengerMapperImpl .> Passenger: maps

interface BookingMapper {} 
interface BookingSpecification {}

BookingMapper --up--|> DataMapper
BookingMapper .> BookingSpecification: "finds all with"
BookingRepositoryImpl -down-|>"1" BookingMapper: mapper

class BookingMapperImpl {
  - connectionPool: ConnectionPool
  - flightMapper: FlightMapper
  - customerMapper: CutomerMapper
  - flightSeatAllocationResultsMapper: FlightSeatAllocationMapper
}

BookingMapperImpl .|> BookingMapper
BookingMapperImpl .> Booking: maps

interface FlightMapper {} 
interface FlightSpecification {}

FlightMapper --up--|> DataMapper
FlightMapper .> FlightSpecification: "finds all with"
FlightRepositoryImpl -down-|>"1" FlightMapper: mapper

class FlightMapperImpl {
  - connectionPool: ConnectionPool
  - airlineMapper: AirlineMapper
  - airportMapper: AirportMapper
  - flightSeatAllocationMapper: FlightSeatAllocationMapper
  - airplaneMapper: AirplaneProfileMapper
  - flightSeatMapper: FlightSeatMapper
}

FlightMapperImpl .|> FlightMapper
FlightMapperImpl .> Flight: maps

interface FlightSeatMapper {} 
interface FlightSeatSpecification {}

FlightSeatMapper --up--|> DataMapper
FlightSeatMapper .> FlightSeatSpecification: "finds all with"
FlightSeatRepositoryImpl -down-|>"1" FlightSeatMapper: mapper

class FlightSeatMapperImpl {
  - connectionPool: ConnectionPool
  - flightMapper: FlightMapper
}

FlightSeatMapperImpl .|> FlightSeatMapper
FlightSeatMapperImpl .> FlightSeat: maps

interface AirplaneProfileMapper {} 
interface AirplaneProfileSpecification {}

AirplaneProfileMapper --up--|> DataMapper

AirplaneProfileMapper .> AirplaneProfileSpecification: "finds all with"
AirplaneProfileRepositoryImpl -down-|>"1" AirplaneProfileMapper: mapper

class AirplaneProfileMapperImpl {
  - connectionPool: ConnectionPool
}

AirplaneProfileMapperImpl .|> AirplaneProfileMapper
AirplaneProfileMapperImpl .> AirplaneProfile: maps

interface UnitOfWork {
  + registerNew(entity: Object)
  + registerDirty(entity: Object)
  + registerRemoved(entity: Object)
  + start() 
  + commit()
  + rollback()
}

class UnitOfWorkImpl {
  
}

UnitOfWorkImpl .up.|> UnitOfWork
UnitOfWorkImpl -> DataMapperRegistry: registry
UnitOfWorkImpl .> DataMapper: calls mapping fuctions

interface AirportRepository {
  + findAllAirports(): List<Airport>
}

interface BookingRepository {
  + findAllCustomerBookings(customerId: EntityId): List<Booking>
}

interface PassengerRepository {}

interface AirplaneProfileRepository {
  + findAllAirplanes(): List<AirplaneProfile>
}

interface FlightRepository {
  + searchFlights(search: FlightSearch): List<Flight>
}

interface FlightSeatRepository {}


interface UserRepository {
  + find(String username, String password: String): Optional<T>
  + allUsers(): List<User>
}

interface CustomerRepository {

}

interface AdministratorRepository {
  
}

interface AirlineRepository {
  + findAllAirlines(): List<Airline>
}

FlightRepositoryImpl .up.|> FlightRepository
FlightSeatRepositoryImpl .up.|> FlightSeatRepository
AirportRepositoryImpl .up.|> AirportRepository
PassengerRepositoryImpl .up.|> PassengerRepository
BookingRepositoryImpl .up.|> BookingRepository
AirplaneProfileRepositoryImpl .up.|> AirplaneProfileRepository
UserRepositoryImpl .up.|> UserRepository
CustomerRepositoryImpl .up.|> CustomerRepository
AdministratorRepositoryImpl .up.|> AdministratorRepository
AirlineRepositoryImpl .up.|> AirlineRepository

class Flight {}
class FlightSeat {}
class Airport {}
class AirplaneProfile {}
abstract class User {}
class Airline {}
class Administrator {}
class Booking {}
class Passenger {}

@enduml