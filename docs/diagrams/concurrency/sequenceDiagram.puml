@startuml concurrency sequence diagram

participant "HttpRequestDispatcher" as dispatcher
participant "WebApplicationContext" as webCtx
participant "delegate:HttpRequestDelegate" as delegate
participant "httpResponse:HttpResponse" as res
participant "IdentityMapper" as imap
participant "UnitOfWork" as uow
participant "restResponse:RestResponse" as restres
participant "objectMapper:ObjectMapper" as objmap

[-> dispatcher: dispatch(httpRequest)
activate dispatcher
note over dispatcher: sequence to find handling delegate ommited for brevity
dispatcher -> dispatcher: handle(httpRequest, delegate)
activate dispatcher
loop retries < MAX_RETIRES
  dispatcher -> imap: reset()
  activate imap
  deactivate imap
  dispatcher -> uow: start()
  activate uow
  deactivate uow
  dispatcher -> delegate: handle(request)
  activate delegate
  delegate -> restres **: new RestResponse(status, body, headers)
  ref over delegate: see delegate flow
  alt optmistic locking violation detected
    dispatcher <-- delegate: optimistic locking exception
    dispatcher -> uow: rollback()
    activate uow
    deactivate uow
    note over dispatcher: retries++
  else
    delegate --> dispatcher: restResponse
    deactivate delegate
    dispatcher -> restres: body = getBody()
    activate restres
    deactivate restres
    opt body exists
      dispatcher -> webCtx: objectMapper = getObjectMapper()
      activate webCtx
      deactivate webCtx
      dispatcher -> objmap: bodyStr = writeValueAsString(body)
      activate objmap
      deactivate objmap
    end
    dispatcher -> restres: status = getStatus()
    activate restres
    deactivate restres
    dispatcher -> uow: commit()
    activate uow
    deactivate uow
    break
    end
  end
end
activate uow
deactivate uow
dispatcher -> res **: new HttpResponse(status, bodyStr, headers)
[<-- dispatcher: httpResponse





@enduml