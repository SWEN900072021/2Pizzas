openapi: "3.0.2"

info:
  title: 2Pizzas API
  version: "1.0"
servers:
  - url: https://api.server.test/v1
paths:
  /search/flight:
    get:
      operationId: searchFlights
      parameters:
        - in: query
          name: destination
          required: false
          schema:
            $ref: "#/components/schemas/Id"
        - in: query
          name: origin
          required: false
          schema:
            $ref: "#/components/schemas/Id"
        - in: query
          name: departingBefore
          required: false
          schema:
            type: string
            format: date-time
        - in: query
          name: departingAfter
          required: false
          schema:
            type: string
            format: date-time
        - in: query
          name: airline
          required: false
          schema:
            $ref: "#/components/schemas/Id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FlightSearchResult"
  /flight:
    post:
      operationId: createFlight
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewFlight"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Flight"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorisedError"
    get:
      operationId: getAllFlights
      description: Get all flights belonging to the logged in Airline
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Flight"
        "401":
          $ref: "#/components/responses/UnauthorisedError"
  /flight/{id}:
    get:
      operationId: getFlightById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: "#/components/schemas/Id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Flight"
        "401":
          $ref: "#/components/responses/UnauthorisedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    patch:
      operationId: updateFlight
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: "#/components/schemas/Id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FlightUpdate"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Flight"
        "401":
          $ref: "#/components/responses/UnauthorisedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /flight/{id}/passenger:
    get:
      operationId: getFlightPassengers
      parameters:
        - in: path
          required: true
          name: id
          schema:
            $ref: "#/components/schemas/Id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Passenger"
        "401":
          $ref: "#/components/responses/UnauthorisedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /booking:
    post:
      operationId: createBooking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewBooking"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Booking"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorisedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "409":
          $ref: "#/components/responses/ConflictError"
  /customer/booking:
    get:
      operationId: getCustomerBookings
      responses:
        "200":
          description: All customer bookings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Booking"
        "401":
          $ref: "#/components/responses/UnauthorisedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /airport:
    post:
      operationId: createAirport
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewAirport"
      responses:
        "201":
          description: Airport created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Airport"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorisedError"
    get:
      operationId: getAllAirports
      responses:
        "200":
          description: All airports
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Airport"
  /airport/{id}:
    patch:
      operationId: updateAirport
      parameters:
        - in: path
          required: true
          name: Id
          schema:
            $ref: "#/components/schemas/Id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAirport"
      responses:
        "201":
          description: Airport updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Airport"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorisedError"
  /airplane-profile:
    post:
      operationId: createAirplaneProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewAirplaneProfile"
      responses:
        "201":
          description: Airplane profile created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AirplaneProfile"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorisedError"
    get:
      operationId: getAllAirplaneProfiles
      responses:
        "200":
          description: All airplane profiles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AirplaneProfile"
  /user:
    get:
      operationId: getAllUsers
      responses:
        "200":
          description: All users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/UnauthorisedError"
  /user/{id}:
    patch:
      operationId: getAllUsers
      parameters:
        - in: path
          required: true
          name: Id
          schema:
            $ref: "#/components/schemas/Id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewAirplaneProfile"
      responses:
        "200":
          description: Updated user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateUser"
        "401":
          $ref: "#/components/responses/UnauthorisedError"
  /airline:
    post:
      operationId: createAirline
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewAirline"
      responses:
        "201":
          description: Airline created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Airline"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorisedError"
    get:
      operationId: getAllAirlines
      responses:
        "200":
          description: All airlines
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Airline"
  /admin:
    post:
      operationId: createAdmin
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewAdmin"
      responses:
        "201":
          description: Admin created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorisedError"
  /signup:
    post:
      operationId: signup
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUp"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/BadRequestError"
  /login:
    post:
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LogIn"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JWT"
        "400":
          $ref: "#/components/responses/BadRequestError"

components:
  schemas:
    Id:
      type: string
      format: uuid
    UpdateUser:
      type: object
      properties:
        status: 
          $ref: "#/components/schemas/UserStatus"
    User:
      type: object
      properties:
        type:
          $ref:  "#/components/schemas/UserType"
        username:
          type: string
        id:
          $ref: "#/components/schemas/Id"
        status: 
          $ref: "#/components/schemas/UserStatus"
    Passenger:
      type: object
      properties:
        givenName:
          type: string
        surname:
          type: string
        passportNumber:
          type: string
        dateOfBirth:
          type: string
          format: date
        nationality:
          type: string
        seatName:
          type: string
        booking:
          $ref: "#/components/schemas/Id"
    BookingCustomer:
      type: object
      properties:
        username:
          type: string
        givenName:
          type: string
        surname:
          type: string
    PassengerBooking:
      type: object
      properties:
        givenName:
          type: string
        surname:
          type: string
        passportNumber:
          type: string
        dateOfBirth:
          type: string
          format: date
        nationality:
          type: string
        seatAllocations:
          type: array
          items:
            type: object
            properties:
              seatName:
                type: string
              flightId:
                $ref: "#/components/schemas/Id"
            required:
              - seatName
              - flightId
      required:
        - givenName
        - surname
        - passportNumber
        - dateOfBirth
        - nationality
        - seatName
    NewBooking:
      type: object
      properties:
        flightId:
          $ref: "#/components/schemas/Id"
        returnFlightId:
          $ref: "#/components/schemas/Id"
        passengers:
          type: array
          items:
            $ref: "#/components/schemas/PassengerBooking"
    FlightBooking:
      type: object
      properties:
        airline:
          $ref: "#/components/schemas/AirlineDescription"
        origin:
          $ref: "#/components/schemas/AirportDescription"
        destination:
          $ref: "#/components/schemas/AirportDescription"
        departure:
          type: string
          format: date-time
        arrival:
          type: string
          format: date-time
        profile:
          $ref: "#/components/schemas/AirplaneProfileDescription"
        code:
          type: string
        status:
          $ref: "#/components/schemas/FlightStatus"
        seatAllocations:
          type: array
          items:
            $ref: "#/components/schemas/Passenger"
    Booking:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        flight:
          $ref: "#/components/schemas/FlightBooking"
        returnFlight:
          $ref: "#/components/schemas/FlightBooking"
        customer:
          $ref: "#/components/schemas/BookingCustomer"
      required:
        - id
        - flight
        - returnFlight
        - customer
    AirportDescription:
      type: object
      properties:
        name:
          type: string
        code:
          type: string
        location:
          type: string
    AirlineDescription:
      type: object
      properties:
        name:
          type: string
        code:
          type: string
    AirplaneProfileDescription:
      type: object
      properties:
        name:
          type: string
        code:
          type: string
    AirplaneProfile:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        type:
          type: string
        code:
          type: string
        firstClassRows:
          type: number
          format: int32
        firstClassColumns:
          type: number
          format: int32
        businessClassRows:
          type: number
          format: int32
        businessClassColumns:
          type: number
          format: int32
        economyClassRows:
          type: number
          format: int32
        economyClassColumns:
          type: number
          format: int32
    NewAirplaneProfile:
      type: object
      properties:
        name:
          type: string
        code:
          type: string
        firstClassRows:
          type: number
          format: int32
          minimum: 0
        firstClassColumns:
          type: number
          format: int32
          minimum: 0
        businessClassRows:
          type: number
          format: int32
          minimum: 0
        businessClassColumns:
          type: number
          format: int32
          minimum: 0
        economyClassRows:
          type: number
          format: int32
          minimum: 0
        economyClassColumns:
          type: number
          format: int32
          minimum: 0
      required:
        - name
        - code
    UserType:
      type: string
      enum:
        - administrator
        - airline
        - customer
    FlightStatus:
      type: string
      enum:
        - TO_SCHEDULE
        - CANCELLED
        - DELAYED
    NewStopOver:
      type: object
      properties:
        location:
          $ref: "#/components/schemas/Id"
        departure:
          type: string
          format: date-time
        arrival:
          type: string
          format: date-time
      required:
        - location
        - departure
        - arrival
    FlightUpdate:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/FlightStatus"
        departure:
          type: string
          format: date-time
        arrival:
          type: string
          format: date-time
        stopOvers:
          type: array
          items:
            $ref: "#/components/schemas/NewStopOver"
    NewFlight:
      type: object
      properties:
        profile:
          $ref: "#/components/schemas/Id"
        origin:
          $ref: "#/components/schemas/Id"
        destination:
          $ref: "#/components/schemas/Id"
        departure:
          type: string
          format: date-time
        code:
          type: string
        arrival:
          type: string
          format: date-time
        stopOvers:
          type: array
          items:
            $ref: "#/components/schemas/NewStopOver"
      required:
        - profile
        - airline
        - origin
        - destination
        - departure
        - arrival
        - code
    StopOver:
      type: object
      properties:
        location:
          $ref: "#/components/schemas/AirportDescription"
        departure:
          type: string
          format: date-time
        arrival:
          type: string
          format: date-time
    SeatClass:
      type: string
      enum:
        - FIRST
        - BUSINESS
        - ECONOMY
    FlightSeat:
      type: object
      properties:
        name:
          type: string
        seatClass:
          $ref: "#/components/schemas/SeatClass"
    Flight:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        profile:
          $ref: "#/components/schemas/AirplaneProfileDescription"
        airline:
          $ref: "#/components/schemas/AirlineDescription"
        origin:
          $ref: "#/components/schemas/AirportDescription"
        destination:
          $ref: "#/components/schemas/AirportDescription"
        departure:
          type: string
          format: date-time
        arrival:
          type: string
          format: date-time
        code:
          type: string
        status:
          $ref: "#/components/schemas/FlightStatus"
        seats:
          type: array
          items:
            $ref: "#/components/schemas/FlightSeat"
        stopOvers:
          type: array
          items:
            $ref: "#/components/schemas/StopOver"
    FlightSeatSearchResult:
      type: object
      properties:
        name:
          type: string
        seatClass:
          $ref: "#/components/schemas/SeatClass"
        booked:
          type: boolean
    SeatAvailability:
      type: object
      properties:
        seats:
          type: array
          items:
            type: string
        seatClass:
          $ref: "#/components/schemas/SeatClass"
    FlightSearchResult:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        airplane:
          $ref: "#/components/schemas/AirplaneProfileDescription"
        airline:
          $ref: "#/components/schemas/AirlineDescription"
        origin:
          $ref: "#/components/schemas/AirportDescription"
        destination:
          $ref: "#/components/schemas/AirportDescription"
        departure:
          type: string
          format: date-time
        arrival:
          type: string
          format: date-time
        code:
          type: string
        status:
          $ref: "#/components/schemas/FlightStatus"
        seats:
          type: array
          items:
            $ref: "#/components/schemas/FlightSeatSearchResult"
        stopOvers:
          type: array
          items:
            $ref: "#/components/schemas/StopOver"
    NewAirport:
      type: object
      properties:
        name:
          type: string
        code:
          type: string
        location:
          type: string
        zoneId:
          type: string
          format: timezoneId
      required:
        - name
        - code
        - location
        - zoneId
    AirportStatus:
      type: string
      enum:
        - ACTIVE
        - INACTIVE
    UpdateAirport:
      type: object
      properties:
        status: 
          $ref: "#/components/schemas/AirportStatus"
    Airport:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
        code:
          type: string
        location:
          type: string
        zoneId:
          type: string
          format: timezoneId
        status: 
          $ref: "#/components/schemas/AirportStatus"
    NewAdmin:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
    NewAirline:
      type: object
      required:
        - username
        - password
        - code
        - name
      properties:
        username:
          type: string
        password:
          type: string
        code:
          type: string
        name:
          type: string
    UserStatus:
      type: string
      enum:
        - ACTIVE
        - INACTIVE
    Airline:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        code:
          type: string
        name:
          type: string
        status: 
          $ref: "#/components/schemas/UserStatus"
    SignUp:
      type: object
      required:
        - username
        - password
        - email
        - givenName
        - surname
      properties:
        username:
          type: string
        password:
          type: string
        email:
          type: string
          format: email
        givenName:
          type: string
        surname:
          type: string
    LogIn:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
    JWT:
      type: object
      properties:
        token:
          type: string
  responses:
    UnauthorisedError:
      description: UnauthorisedError
    BadRequestError:
      description: Bad request
    NotFoundError:
      description: Not Found
    ForbiddenError:
      description: Forbidden
    ConflictError:
      description: Conflict
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []
